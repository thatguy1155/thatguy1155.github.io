{"version":3,"sources":["actions/turnActions.js","actions/types.js","components/WhitePiecesCaptured.js","components/BlackPiecesCaptured.js","components/pieces/Rooke.js","actions/boardActions.js","components/pieces/Knight.js","components/pieces/Pawn.js","components/pieces/Bishop.js","components/pieces/King.js","components/pieces/Queen.js","components/Square.js","components/Chessboard.js","reducers/helperFunctions/supplements.js","reducers/helperFunctions/moves.js","reducers/helperFunctions/board.js","reducers/boardReducer.js","reducers/turnReducer.js","reducers/index.js","Store.js","App.js","serviceWorker.js","index.js"],"names":["endGame","postData","dispatch","type","payload","connect","state","capturedWhitePieces","board","selectedPiece","winner","turns","props","useState","hovering","setHovering","useEffect","length","forEach","item","id","shortid","generate","isHovering","imageMap","Pawn","Knight","Rooke","Bishop","Queen","King","winnerChosen","gameOn","gameOver","checkmateButton","height","width","border","backgroundColor","color","borderRadius","marginTop","display","piece","team","kingSelected","className","style","flexWrap","map","src","key","alt","onMouseOver","onMouseOut","onClick","window","location","reload","cursor","capturedBlackPieces","turn","rookeAction","coordinates","hoverSettings","boxShadow","padding","chessPiece","knightAction","pawnAction","bishopAction","kingAction","queenAction","selected","moveSquare","changeTurns","squareInfo","y","coordinate","x","squareStyle","opacity","playable","chosenPiece","squares","Fragment","CssBaseline","Container","maxWidth","marginLeft","gridTemplateColumns","gridGap","square","setDiagonalBounds","yourTeam","moves","unfilteredDiagonalMoves","uLB","filterMoves","upLeftMoves","uRB","upRightMoves","lLB","lowLeftMoves","lRB","lowRightMoves","setLateralBounds","unfilteredLateralMoves","uB","upMoves","dB","downMoves","lB","leftMoves","rB","rightMoves","bound","i","originalY","originalX","push","shift","pawnMoves","space","knightMoves","bishopMoves","bounds","rookeMoves","queenMoves","lBounds","dBounds","kingMoves","moveSquares","oldY","oldX","clearBoard","initialState","combineReducers","action","pawnState","thisPawn","knightState","thisKnight","bishopState","thisBishop","rookeState","thisRooke","queenState","thisQueen","kingState","thisKing","movedState","hostages","newBlackPiecesCaptured","newWhitePiecesCaptured","endState","newTurn","middleware","thunk","Store","createStore","rootReducer","compose","applyMiddleware","teal","App","store","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a30bc4ab.chunk.js","sourcesContent":["import { CHANGE_TURNS,END_GAME } from './types'\n\nexport const changeTurns = (postData) => dispatch => {\n    dispatch({\n        type: CHANGE_TURNS,\n        payload: postData\n    })\n}\n\nexport const endGame = (postData) => dispatch => {\n    dispatch({\n        type: END_GAME,\n        payload: postData\n    })\n}","//these are the types of actions that are dispatched from the actions files\n\n//board types\nexport const PAWN = \"PAWN\"\nexport const KNIGHT = \"KNIGHT\"\nexport const BISHOP = \"BISHOP\"\nexport const ROOKE = \"ROOKE\"\nexport const QUEEN = \"QUEEN\"\nexport const KING = \"KING\"\nexport const MOVE_PIECE = \"MOVE_PIECE\"\n\n//turn types\nexport const CHANGE_TURNS = \"CHANGE_TURNS\"\nexport const END_GAME = \"END_GAME\"","import React, {useState,useEffect} from 'react'\nimport { endGame } from '../actions/turnActions'\nimport shortid from 'shortid'\nimport { connect } from 'react-redux'\nimport './board.scss'\n\n//main react component\nconst WhitePiecesCaptured = (props) => {\n    const {capturedWhitePieces,selectedPiece,endGame,winner} = props\n    const [hovering, setHovering] = useState('off')\n\n    useEffect(() => {\n      //not standard to the rules of chess, but if the king gets captured somehow then end the game\n      capturedWhitePieces[capturedWhitePieces.length - 1] && capturedWhitePieces[capturedWhitePieces.length - 1].type === 'King' && endGame('black')\n      // eslint-disable-next-line\n    },[capturedWhitePieces])\n\n    function refreshPage() {\n      window.location.reload(false);\n    }\n\n    //pieces\n    capturedWhitePieces.forEach(item => {\n      item.id = shortid.generate()\n  })\n\n\n    //an object of images to call when based on the caputred items\n    const imageMap = {\n        Pawn:\"https://i.ibb.co/QJFFxmq/white-pawn.png\",\n        Knight:\"https://i.ibb.co/y5xJVJq/white-knight.png\",\n        Rooke:\"https://i.ibb.co/sWhMDQF/white-rooke.png\",\n        Bishop:\"https://i.ibb.co/F4TcRpS/white-bishop.png\",\n        Queen:\"https://i.ibb.co/my2t1Kk/white-queen.png\",\n        King:\"https://i.ibb.co/Y06LN78/white-king.png\"\n    }\n    \n    \n    //--------Functions for the appearence ----------------\n\n    //show checkmate button as an option to be clicked if the king is selected\n    const kingSelected = (selectedPiece) => {\n      return selectedPiece.piece === 'King' && selectedPiece.team === 'black' ? 'block' : 'none'   \n    }\n    //slightly change the checkmate button's color on hover\n    const hoverSettings = (isHovering) => {\n      return isHovering === 'on' ? '#DDDDDD': 'white'\n    }\n    //change the content of this element to display a final message when someone wins the game\n    const winnerChosen = (winner) => {\n      return winner === 'none' ? {gameOn:'block',gameOver:'none'} : {gameOn:'none',gameOver:'block'}\n    }\n\n    const finalMessage = () => {\n      return winner === 'black' ? \"black team wins\" : \"play again?\"\n    }\n\n    //---------------inline style----------------\n    const checkmateButton = {\n      height:'20px',\n      width:'85px',\n      border:'none',\n      backgroundColor:hoverSettings(hovering),\n      color:'black',\n      borderRadius:'10px',\n      marginTop:'10px',\n      display:kingSelected(selectedPiece)\n    }\n\n    const captured = {\n      display:'flex',\n      flexWrap:'wrap',\n      backgroundColor:'black',\n      borderRadius:'10px'\n    }\n\n    \n\n    const finalMessageStyle = {\n      cursor:'pointer',\n      color:'white'\n  }\n\n  \n    return (\n      <div className=\"captured-sizing\" style={captured}>\n          <div style={{display:winnerChosen(winner).gameOn}}>\n            {capturedWhitePieces.map(item => (\n                <img src={imageMap[item.type]} key={item.id} alt=\"captured piece\" className=\"captured-piece\"></img>\n            ))}\n            <button style={checkmateButton} onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {endGame('white')}}>checkmate?</button>\n          </div>\n          <div style={{display:winnerChosen(winner).gameOver}}>\n              <h2 onClick={() => {refreshPage()}} style={finalMessageStyle}>{finalMessage()}</h2>\n          </div>\n    </div>\n    );\n  }\n  \n  //grab the following info from the redux store at ../reducers/turnReducers and ../reducers/boardReducers\n  const mapStateToProps = state => ({\n    capturedWhitePieces: state.board.capturedWhitePieces,\n    selectedPiece: state.board.selectedPiece,\n    winner:state.turns.winner \n  })\n\n  // connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {endGame})(WhitePiecesCaptured)","import React, {useState, useEffect} from 'react';\nimport { endGame } from '../actions/turnActions'\nimport shortid from 'shortid'\nimport { connect } from 'react-redux'\nimport './board.scss'\n\nconst BlackPiecesCaptured = (props) => {\n    const {capturedBlackPieces,selectedPiece,endGame,winner} = props\n    const [hovering, setHovering] = useState('off')\n\n    useEffect(() => {\n        //not standard to the rules of chess, but if the king gets captured somehow then end the game\n        capturedBlackPieces[capturedBlackPieces.length - 1] && capturedBlackPieces[capturedBlackPieces.length - 1].type === 'King' && endGame('white')\n        // eslint-disable-next-line\n    },[capturedBlackPieces]) \n\n    //if user clicks on the final message, then play again\n    function refreshPage() {\n        window.location.reload(false);\n      }\n\n    //an object of images to call when based on the caputred items\n    const imageMap = {\n        Pawn:\"https://i.ibb.co/0Mff62X/black-pawn.png\",\n        Knight:\"https://i.ibb.co/190N1VS/black-knight.png\",\n        Rooke:\"https://i.ibb.co/WKM5Vvw/black-rooke.png\",\n        Bishop:\"https://i.ibb.co/LtZgvzy/black-bishop.png\",\n        Queen:\"https://i.ibb.co/k3ww498/black-queen.png\",\n        King:\"https://i.ibb.co/hDfXM01/black-king.png\"\n    }\n\n    //gererate a unique id to serve as a key\n    capturedBlackPieces.forEach(item => {\n        item.id = shortid.generate()\n    })\n\n    //--------Functions for the appearence ----------------\n    //show checkmate button as an option to be clicked if the king is selected\n    const kingSelected = (selectedPiece) => {\n        return selectedPiece.piece === 'King' && selectedPiece.team === 'white' ? 'block' : 'none'   \n      }\n      //slightly change the checkmate button's color on hover\n      const hoverSettings = (isHovering) => {\n        return isHovering === 'on' ? '#333333': 'black'\n      }\n      //change the content of this element to display a final message when someone wins the game\n      const winnerChosen = (winner) => {\n        return winner === 'none' ? {gameOn:'block',gameOver:'none'} : {gameOn:'none',gameOver:'block'}\n      }\n  \n      const finalMessage = () => {\n        return winner === 'white' ? \"white team wins\" : \"play again?\"\n      }\n\n\n      //----------------inline style--------------------\n    const checkmateButton = {\n        height:'20px',\n        width:'85px',\n        border:'none',\n        backgroundColor:hoverSettings(hovering),\n        color:'white',\n        borderRadius:'10px',\n        marginTop:'10px',\n        display:kingSelected(selectedPiece)\n    }\n\n    const captured = {\n        display:'flex',\n        flexWrap:'wrap',\n        backgroundColor:'white',\n        borderRadius:'10px'\n    }\n  \n  \n\n    const finalMessageStyle = {\n        cursor:'pointer',\n        color:'black'\n    }\n  \n    return (\n      <div className=\"captured-sizing\" style={captured}>\n          <div style={{display:winnerChosen(winner).gameOn}}>\n            {capturedBlackPieces.map(item => (\n                <img src={imageMap[item.type]} key={item.id} alt=\"captured piece\" className=\"captured-piece\"></img>\n            ))}\n            <button style={checkmateButton} onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {endGame('black')}}>checkmate?</button>\n          </div>\n          <div style={{display:winnerChosen(winner).gameOver}}>\n              <h2 onClick={() => {refreshPage()}} style={finalMessageStyle}>{finalMessage()}</h2>\n          </div>\n        \n    </div>\n    );\n  }\n\n  //grab the following info from the redux store at ../reducers/turnReducers and ../reducers/boardReducers\n  const mapStateToProps = state => ({\n    capturedBlackPieces: state.board.capturedBlackPieces,\n    selectedPiece: state.board.selectedPiece,\n    winner: state.turns.winner \n  })\n\n  // connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {endGame})(BlackPiecesCaptured)","import React, {useState} from 'react';\nimport { rookeAction } from '../../actions/boardActions'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport './pieces.scss'\n\n\nconst Rooke = (props) => {\n   const {team,location,rookeAction,turn} = props\n   const [hovering, setHovering] = useState('off');\n\n   //call action from ../../actions/boardActions\n   const rookeMoves = () => {\n        turn === team && rookeAction(location,team)\n    } \n    \n    //--------Functions for the appearence ----------------\n   const teamParser = () => {\n        return team === 'black' ? \"https://i.ibb.co/WKM5Vvw/black-rooke.png\" : \"https://i.ibb.co/sWhMDQF/white-rooke.png\" \n    }\n    //alter style for the piece while hovering over\n    const hoverSettings = (isHovering) => {\n        return isHovering === 'on' && turn === team && {backgroundColor:'white',boxShadow:'5px 5px 2px 2px',padding:'2px'} \n    }\n\n    //----------inline style----------\n    const chessPiece = {\n        backgroundColor:hoverSettings(hovering).backgroundColor,\n       boxShadow:hoverSettings(hovering).boxShadow,\n       padding:hoverSettings(hovering).padding\n    }\n   \n    return (\n        <img src={teamParser()} alt=\"knight\" className=\"rooke\" style={chessPiece} onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {rookeMoves()}}></img>\n    );\n  }\n\n  //make sure that the returned turn is always a string\n  Rooke.propTypes = {\n    turn: PropTypes.string.isRequired,\n}\n//grab the following info from the redux store at ../reducers/turnReducers\n  const mapStateToProps = state => ({\n    turn: state.turns.turn\n  })\n// connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {rookeAction})(Rooke)","import { PAWN,KNIGHT,BISHOP,ROOKE,QUEEN,KING,MOVE_PIECE } from './types'\n\nexport const pawnAction = (coordinates,team) => dispatch => {\n    dispatch({\n        type: PAWN,\n        payload: {location:coordinates,team:team}\n    })\n}\n\nexport const knightAction = (coordinates,team) => dispatch => {\n    dispatch({\n        type: KNIGHT,\n        payload: {location:coordinates,team:team}\n    })\n}\nexport const bishopAction = (coordinates,team) => dispatch => {\n    dispatch({\n        type: BISHOP,\n        payload: {location:coordinates,team:team}\n    })\n}\n\nexport const rookeAction = (coordinates,team) => dispatch => {\n    dispatch({\n        type: ROOKE,\n        payload: {location:coordinates,team:team}\n    })\n}\n\nexport const queenAction = (coordinates,team) => dispatch => {\n    dispatch({\n        type: QUEEN,\n        payload: {location:coordinates,team:team}\n    })\n}\nexport const kingAction = (coordinates,team) => dispatch => {\n    dispatch({\n        type: KING,\n        payload: {location:coordinates,team:team}\n    })\n}\n\n\nexport const moveSquare = (coordinates) => dispatch => {\n    dispatch({\n        type: MOVE_PIECE,\n        payload: coordinates\n    })\n}\n\n\n","import React, {useState} from 'react';\nimport { knightAction } from '../../actions/boardActions'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport './pieces.scss'\n\nconst Knight = (props) => {\n   const {team,location,knightAction,turn} = props\n   const [hovering, setHovering] = useState('off');\n\n   //call action from ../../actions/boardActions\n   const knightMoves = () => {\n        turn === team && knightAction(location,team)\n    } \n\n    //--------Functions for the appearence ----------------\n    const teamParser = () => {\n        return team === 'black' ? \"https://i.ibb.co/190N1VS/black-knight.png\" : \"https://i.ibb.co/y5xJVJq/white-knight.png\" \n    }\n    //alter style for the piece while hovering over\n    const hoverSettings = (isHovering) => {\n        return isHovering === 'on' && turn === team && {backgroundColor:'white',boxShadow:'5px 5px 2px 2px',padding:'2px'} \n    }\n\n    //----------inline style----------\n    const chessPiece = {\n        backgroundColor:hoverSettings(hovering).backgroundColor,\n       boxShadow:hoverSettings(hovering).boxShadow,\n       padding:hoverSettings(hovering).padding\n    }\n   \n    return (\n        <img src={teamParser()} alt=\"knight\" style={chessPiece} className=\"knight\" onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {knightMoves()}}></img>\n    );\n  }\n\n  //make sure that the returned turn is always a string\n  Knight.propTypes = {\n    turn: PropTypes.string.isRequired,\n}\n//grab the following info from the redux store at ../reducers/turnReducers\n  const mapStateToProps = state => ({\n    turn: state.turns.turn\n  })\n// connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {knightAction})(Knight)","import React, {useState} from 'react';\nimport { pawnAction } from '../../actions/boardActions'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport './pieces.scss'\nconst Pawn = (props) => {\n    //configure state for this component\n   const {team,location,pawnAction,turn} = props\n   const [hovering, setHovering] = useState('off');\n    \n   //call action from ../../actions/boardActions\n    const pawnMoves = () => {\n        turn === team && pawnAction(location,team)\n    } \n\n    //--------Functions for the appearence ----------------\n   const teamParser = () => {\n       return team === 'black' ? \"https://i.ibb.co/0Mff62X/black-pawn.png\" : \"https://i.ibb.co/QJFFxmq/white-pawn.png\" \n   }\n   //alter style for the piece while hovering over\n   const hoverSettings = (isHovering) => {\n       return isHovering === 'on' && turn === team && {backgroundColor:'white',boxShadow:'5px 5px 2px 2px',padding:'2px'} \n    }\n\n    //----------inline style----------\n    const chessPiece = {\n        backgroundColor:hoverSettings(hovering).backgroundColor,\n       boxShadow:hoverSettings(hovering).boxShadow,\n       padding:hoverSettings(hovering).padding\n    }\n   \n    return (\n        <img src={teamParser()} alt=\"pawn\" style={chessPiece} className=\"pawn\" onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {pawnMoves()}}></img>\n    );\n  }\n\n  //make sure that the returned turn is always a string\n  Pawn.propTypes = {\n    turn: PropTypes.string.isRequired,\n}\n\n//grab the following info from the redux store at ../reducers/turnReducers\n  const mapStateToProps = state => ({\n    turn: state.turns.turn\n  })\n  // connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {pawnAction})(Pawn)","import React, {useState} from 'react';\nimport { bishopAction } from '../../actions/boardActions'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport './pieces.scss'\n\nconst Bishop = (props) => {\n   const {team,location,bishopAction,turn} = props\n   const [hovering, setHovering] = useState('off');\n    \n   //call action from ../../actions/boardActions\n   const bishopMoves = () => {\n        turn === team && bishopAction(location,team)\n    } \n\n    //--------Functions for the appearence ----------------\n    const teamParser = () => {\n        return team === 'black' ? \"https://i.ibb.co/LtZgvzy/black-bishop.png\" : \"https://i.ibb.co/F4TcRpS/white-bishop.png\" \n    }\n    //alter style for the piece while hovering over\n    const hoverSettings = (isHovering) => {\n        return isHovering === 'on' && turn === team && {backgroundColor:'white',boxShadow:'5px 5px 2px 2px',padding:'2px'} \n    }\n\n    //----------inline style----------\n    const chessPiece = {\n        backgroundColor:hoverSettings(hovering).backgroundColor,\n       boxShadow:hoverSettings(hovering).boxShadow,\n       padding:hoverSettings(hovering).padding\n    }\n   \n    return (\n        <img src={teamParser()} alt=\"bishop\" style={chessPiece} className=\"bishop\" onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {bishopMoves()}}></img>\n    );\n  }\n//make sure that the returned turn is always a string\n  Bishop.propTypes = {\n    turn: PropTypes.string.isRequired,\n}\n//grab the following info from the redux store at ../reducers/turnReducers\n  const mapStateToProps = state => ({\n    turn: state.turns.turn\n  })\n// connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {bishopAction})(Bishop)","import React, {useState} from 'react';\nimport { kingAction } from '../../actions/boardActions'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport './pieces.scss'\n\nconst King = (props) => {\n   const {team,location,kingAction,turn} = props\n   const [hovering, setHovering] = useState('off');\n\n   //call action from ../../actions/boardActions\n   const kingMoves = () => {\n        turn === team && kingAction(location,team)\n    } \n\n    //--------Functions for the appearence ----------------\n    const teamParser = () => {\n        return team === 'black' ? \"https://i.ibb.co/hDfXM01/black-king.png\" : \"https://i.ibb.co/Y06LN78/white-king.png\" \n    }\n    //alter style for the piece while hovering over\n    const hoverSettings = (isHovering) => {\n        return isHovering === 'on' && turn === team && {backgroundColor:'white',boxShadow:'5px 5px 2px 2px',padding:'2px'} \n    }\n\n    //----------inline style----------\n    const chessPiece = {\n        backgroundColor:hoverSettings(hovering).backgroundColor,\n       boxShadow:hoverSettings(hovering).boxShadow,\n       padding:hoverSettings(hovering).padding\n    }\n   \n    return (\n        <img src={teamParser()} alt=\"king\" style={chessPiece} className=\"king\" onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {kingMoves()}}></img>\n    );\n  }\n\n  \n//make sure that the returned turn is always a string\n  King.propTypes = {\n    turn: PropTypes.string.isRequired,\n}\n//grab the following info from the redux store at ../reducers/turnReducers\n  const mapStateToProps = state => ({\n    turn: state.turns.turn\n  })\n// connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {kingAction})(King)","import React, {useState} from 'react';\nimport { queenAction } from '../../actions/boardActions'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport './pieces.scss'\n\n\nconst Queen = (props) => {\n   const {team,location,queenAction,turn} = props\n   const [hovering, setHovering] = useState('off');\n\n   \n   //call action from ../../actions/boardActions\n   const queenMoves = () => {\n        turn === team && queenAction(location,team)\n    } \n\n    //--------Functions for the appearence ----------------\n    const teamParser = () => {\n        return team === 'black' ? \"https://i.ibb.co/k3ww498/black-queen.png\" : \"https://i.ibb.co/my2t1Kk/white-queen.png\" \n    }\n    //alter style for the piece while hovering over\n    const hoverSettings = (isHovering) => {\n        return isHovering === 'on' && turn === team && {backgroundColor:'white',boxShadow:'5px 5px 2px 2px',padding:'2px'} \n    }\n\n//----------inline style----------\n    const chessPiece = {\n        backgroundColor:hoverSettings(hovering).backgroundColor,\n       boxShadow:hoverSettings(hovering).boxShadow,\n       padding:hoverSettings(hovering).padding\n    }\n   \n    return (\n        <img src={teamParser()} alt=\"queen\" style={chessPiece} className=\"queen\" onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}} onClick={() => {queenMoves()}}></img>\n    );\n  }\n  \n\n \n//make sure that the returned turn is always a string\n  Queen.propTypes = {\n    turn: PropTypes.string.isRequired,\n}\n//grab the following info from the redux store at ../reducers/turnReducers\n  const mapStateToProps = state => ({\n    turn: state.turns.turn\n  })\n// connect that info and the function endGame to this react component\n  export default connect(mapStateToProps, {queenAction})(Queen)","import React, {useState} from 'react';\nimport { connect } from 'react-redux'\nimport { moveSquare } from '../actions/boardActions'\nimport { changeTurns } from '../actions/turnActions'\nimport PropTypes from 'prop-types';\nimport Rooke from './pieces/Rooke'\nimport Knight from './pieces/Knight'\nimport Pawn from './pieces/Pawn'\nimport Bishop from './pieces/Bishop'\nimport King from './pieces/King'\nimport Queen from './pieces/Queen'\nimport './board.scss'\n\n\n\nconst Square = (props) => {\n    const {squareInfo,moveSquare,turn,changeTurns} = props\n    const [hovering, setHovering] = useState('off');\n    const y = squareInfo.coordinate.y\n    const x = squareInfo.coordinate.x\n    \n    //when you click on a playable square, move the selected piece to that square and change turns\n    const movePiece = () => {\n        if (squareInfo.playable === true) {\n            moveSquare({y:y,x:x})\n            changeTurns(turn === 'white' ? 'black' : 'white')\n        }\n    }\n\n    //--------Functions for the appearence ----------------\n\n    //designate square as black or white depending on it's position on the board.\n    //also slightly alter the color on hover\n    const blackOrWhite = () => {\n        if(y % 2 === 0 && x % 2 === 0){\n            return hovering === 'on' && squareInfo.playable ? '#DDDDDD' : 'white'\n        } else if (y % 2 === 1 && x % 2 === 1) {\n            return hovering === 'on' && squareInfo.playable ? '#DDDDDD' : 'white'\n        } else {\n            return hovering === 'on' && squareInfo.playable ? '#333333' : 'black'\n        }\n    }\n    //change the squares opacity depending on turn or if it's a viable next move\n    const isPlayable = () => {\n        if (squareInfo.playable) {\n            return '100%'\n        } else if (squareInfo.piece && squareInfo.piece.team === turn) {\n            return '100%'\n        } else {\n            return '50%'\n        }\n    }\n\n    //------------inline style---------------\n    const squareStyle = {\n        opacity:isPlayable(),\n        backgroundColor:blackOrWhite()\n    }\n\n    //display a chess piece in the square is if is designated in the store at '../reducers/boardReducers'\n    const chessPiece = () => {\n        if (squareInfo.piece){\n            switch(squareInfo.piece.type) {\n                case 'Rooke':\n                    return <Rooke team={squareInfo.piece.team} location={squareInfo.coordinate}/>\n                case 'Knight':\n                    return <Knight team={squareInfo.piece.team} location={squareInfo.coordinate}/>\n                case 'Bishop':\n                    return <Bishop team={squareInfo.piece.team} location={squareInfo.coordinate}/>\n                case 'Pawn':\n                    return <Pawn team={squareInfo.piece.team} location={squareInfo.coordinate}/>\n                case 'King':\n                    return <King team={squareInfo.piece.team} location={squareInfo.coordinate}/>\n                case 'Queen':\n                    return <Queen team={squareInfo.piece.team} location={squareInfo.coordinate}/>\n                default:\n                    break\n                }\n        } else {\n            return ''\n        }\n    }\n\n    const chosenPiece = chessPiece()\n\n    return (\n      <div style={squareStyle} className=\"square\" onMouseOver={() => {setHovering('on')}} onMouseOut={() => {setHovering('off')}}onClick={movePiece}>{chosenPiece}</div>\n    );\n  }\n\n  //make sure the proper props are being passed through redux\nSquare.propTypes = {\n    changeTurns: PropTypes.func.isRequired,\n    turn: PropTypes.string.isRequired,\n}\n\n\n// //below we connect the values from the state to the component\nconst mapStateToProps = state => ({\n    selected: state.board.selectedPiece,\n    turn: state.turns.turn\n\n})\n\n\n  export default connect(mapStateToProps, {moveSquare,changeTurns})(Square)","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport WhiteCaptured from './WhitePiecesCaptured'\nimport BlackCaptured from './BlackPiecesCaptured'\nimport Square from './Square'\nimport { connect } from 'react-redux'\nimport './board.scss'\n\n\n\nconst Chessboard = (props) => {\n  const {squares} = props\n\n  //----------inline style----------\n  const flex = {\n    display:'flex',\n    padding:'5ch'\n  }\n  //make the 8x8 grid where the added posts fall into\n  const boardGrid = {\n    display: 'grid',\n    marginLeft:'4%',\n    gridTemplateColumns: 'repeat(8, 0fr)',\n    gridGap: '0rem',\n    height:'100%',\n  }\n\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div style={flex} className=\"flex-direction\">\n        <BlackCaptured />\n        <Container maxWidth=\"sm\">\n          <div style={boardGrid}>\n            {squares.map(square => (\n                <Square key={[square.coordinate.y,square.coordinate.x]} squareInfo={square} />\n            ))}\n          </div>\n        </Container>\n        <WhiteCaptured />\n      </div>\n    </React.Fragment>\n      \n  );\n}\n\n\n\nconst mapStateToProps = state => ({\n  squares: state.board.squares, //we use posts here because its how the postreducer was defined in root reducer(reducers/index.js) on line 7\n})\n\nexport default connect(mapStateToProps, {})(Chessboard)","/////////supplementary functions for the guiding the pieces' movements\n\n\n//set boundaries for diagonal movement\nexport const setDiagonalBounds = (squares,y,x,yourTeam) => {\n    //take coordinates for all spaces between current position and the end of the board \n    const moves =  unfilteredDiagonalMoves(y,x)\n    \n    const upLeftBound = filterMoves(squares,moves.upLeftMoves,yourTeam).length > 0 ? filterMoves(squares,moves.upLeftMoves,yourTeam) : [-1,-1] //if no boundaties are set by occupied pieces then set the boundaries as one space outside the board\n    const upRightBound = filterMoves(squares,moves.upRightMoves,yourTeam).length > 0 ? filterMoves(squares,moves.upRightMoves,yourTeam) : [-1,8]\n    const lowLeftBound = filterMoves(squares,moves.lowLeftMoves,yourTeam).length > 0 ? filterMoves(squares,moves.lowLeftMoves,yourTeam) : [8,-1]\n    const lowRightBound = filterMoves(squares,moves.lowRightMoves,yourTeam).length > 0 ? filterMoves(squares,moves.lowRightMoves,yourTeam) : [8,8]\n    return {uLB:upLeftBound,uRB:upRightBound,lLB:lowLeftBound,lRB:lowRightBound}\n    \n}\n//set boundaries for lateral movement\nexport const setLateralBounds = (squares,y,x,yourTeam) => {\n    //take coordinates for all spaces between current position and the end of the board\n    const moves =  unfilteredLateralMoves(y,x)\n     \n    const upBound = filterMoves(squares,moves.upMoves,yourTeam).length > 0 ? filterMoves(squares,moves.upMoves,yourTeam) : [-1,0] //if no boundaties are set by occupied pieces then set the boundaries as one space outside the board\n    const downBound = filterMoves(squares,moves.downMoves,yourTeam).length > 0 ? filterMoves(squares,moves.downMoves,yourTeam) : [8,0]\n    const leftBound = filterMoves(squares,moves.leftMoves,yourTeam).length > 0 ? filterMoves(squares,moves.leftMoves,yourTeam) : [0,-1]\n    const rightBound = filterMoves(squares,moves.rightMoves,yourTeam).length > 0 ? filterMoves(squares,moves.rightMoves,yourTeam) : [0,8]\n    return {uB:upBound,dB:downBound,lB:leftBound,rB:rightBound}\n    \n}\n\n//filter all lateral and diagonal moves\n\n//filter out any moves beyond the next occupied square. If the square is occupied by another team, then movement to that square is permitted\nconst filterMoves = (squares,moves,yourTeam) => {\n    var bound = []\n    //move through the array of unfiltered moves from the furthest moving toward the current location\n    for (let i = moves.length - 1; i >= 0 ; i--){\n        squares.forEach(square => {\n            //if the square is a possible move for that piece and contains a different piece\n            if (square.coordinate.y === moves[i][0] && square.coordinate.x === moves[i][1] && square.piece) {\n                if(square.piece.team !== yourTeam && i < moves.length - 1){\n                    bound = moves[i + 1]\n                } else if(square.piece.team !== yourTeam && i === moves.length - 1){\n                    bound = []\n                } else {\n                    bound = moves[i]\n                }\n            } \n        }) \n    }\n    return bound\n}\n\n//this function gathers up all the spaces between a bishop or queen and the end of the board\nconst unfilteredDiagonalMoves = (y,x) => {\n    const moves = {\n        upLeftMoves:[],\n        upRightMoves:[],\n        lowLeftMoves:[],\n        lowRightMoves:[]\n    }\n   let originalY = y\n   let originalX = x\n\n    //append to array the y,x coordinates for all moves in the up/left direction\n    while(y >= 0 && x >= 0){\n        moves.upLeftMoves.push([y,x])\n        y -=1\n        x -= 1\n    }\n    //remove the first item since it's the current space\n    moves.upLeftMoves.shift()\n    //reset x and y values to the piece's current coordinate\n    y = originalY\n    x = originalX\n\n    while(y >= 0 && x <= 7){\n        moves.upRightMoves.push([y,x])\n        y -=1\n        x += 1\n    }\n    moves.upRightMoves.shift()\n    y = originalY\n    x = originalX\n\n    while(y <= 7 && x >= 0){\n        moves.lowLeftMoves.push([y,x])\n        y +=1\n        x -= 1\n    }\n    moves.lowLeftMoves.shift()\n    y = originalY\n    x = originalX\n\n    while(y <= 7 && x <= 7){\n        moves.lowRightMoves.push([y,x])\n        y +=1\n        x += 1\n    }\n    moves.lowRightMoves.shift()\n    y = originalY\n    x = originalX\n    return moves\n}\n\n//this function gathers up all the spaces between a rooke or queen and the end of the board\nconst unfilteredLateralMoves = (y,x) => {\n    const moves = {\n        upMoves:[],\n        downMoves:[],\n        leftMoves:[],\n        rightMoves:[]\n    }\n   let originalY = y\n   let originalX = x\n\n    //append to array the y,x coordinates for all moves in the up/left direction\n    while(y >= 0){\n        moves.upMoves.push([y,x])\n        y -=1\n    }\n    //remove the first item since it's the current space\n    moves.upMoves.shift()\n    //reset x and y values to the piece's current coordinate\n    y = originalY\n    \n    while(y <= 7){\n        moves.downMoves.push([y,x])\n        y +=1\n    }\n    moves.downMoves.shift()\n    y = originalY\n\n    while(x >= 0){\n        moves.leftMoves.push([y,x])\n        x -= 1\n    }\n    moves.leftMoves.shift()\n    x = originalX\n\n    while(x <= 7){\n        moves.rightMoves.push([y,x])\n        x += 1\n    }\n    moves.rightMoves.shift()\n    x = originalX\n    return moves\n}","import { setDiagonalBounds, setLateralBounds } from './supplements'\n\nexport const pawnMoves = (squares,y,x,yourTeam) => {\n    let space = yourTeam === 'black' ? -1 : 1  //move up or down the board depending on your team\n    squares.forEach(square => {\n            if (((y === 6 && yourTeam === 'black') || (y === 1 && yourTeam === 'white')) && square.coordinate.y === y + (2 * space) &&  square.coordinate.x === x && square.piece === null){\n                square.playable=true //the first move for a pawn when the pawn can move 2 spaces\n            } else if (square.coordinate.y === y + space &&  square.coordinate.x === x && square.piece === null){\n                square.playable=true // move one space\n            } else if (square.coordinate.y === y + space &&  (square.coordinate.x === x + 1 || square.coordinate.x === x - 1) && square.piece && square.piece.team !== yourTeam){\n                square.playable=true //move one diagonally to capture an opponent\n            } else {\n                square.playable=false\n            }\n    })\n}\n\n//set as viable any space where x or y value is greater/less by two and the other is greater/less by one \nexport const knightMoves = (squares,y,x,yourTeam) => {\n    squares.forEach(square => {\n        if (square.piece && square.piece.team === yourTeam) {\n            square.playable=false\n        } else if ((square.coordinate.y === y + 2 || square.coordinate.y ===  y - 2) && (square.coordinate.x === x + 1 || square.coordinate.x === x - 1)){\n            square.playable=true\n        } else if ((square.coordinate.y === y + 1 || square.coordinate.y === y - 1) && (square.coordinate.x === x + 2 || square.coordinate.x === x - 2)){\n            square.playable=true\n        } else {\n            square.playable=false\n        }\n    })\n}\n\n//rookes can move diagonally so any space where the y(1) - y(0) = x(1) - x(0) or y(1) - y(0) = x(0) - x(1) \n//up until the next piece of the same team or spaces after the next opposing team.\n//these boundaries are set via setLateralBounds in the supplements page\nexport const bishopMoves = (squares,y,x,yourTeam) => {\n    let bounds = setDiagonalBounds(squares,y,x,yourTeam)\n    squares.forEach(square => {\n        if (square.piece && square.piece.team === yourTeam) {\n            square.playable=false\n        } else if ((square.coordinate.y - y)  === (square.coordinate.x - x) && (square.coordinate.y < bounds.lRB[0] && square.coordinate.y > bounds.uLB[0]) && (square.coordinate.x < bounds.lRB[1] && square.coordinate.x > bounds.uLB[1])){\n            square.playable=true\n        } else if ((square.coordinate.y - y)  === (x - square.coordinate.x) && (square.coordinate.y < bounds.lLB[0] && square.coordinate.y > bounds.uRB[0]) && (square.coordinate.x > bounds.lLB[1] && square.coordinate.x < bounds.uRB[1])){\n            square.playable=true\n        } else {\n            square.playable=false\n        }\n    })  \n}\n\n//rookes can move laterally so any space where the y or x value is the same\n//up until the next piece of the same team or spaces after the next opposing team.\n//these boundaries are set via setLateralBounds in the supplements page\nexport const rookeMoves = (squares,y,x,yourTeam) => {\n    let bounds = setLateralBounds(squares,y,x,yourTeam)\n    squares.forEach(square => {\n        if (square.piece && square.piece.team === yourTeam) {\n            square.playable=false\n        } else if ((square.coordinate.x === x) && (square.coordinate.y > bounds.uB[0] && square.coordinate.y < bounds.dB[0])){\n            square.playable=true\n        } else if ((square.coordinate.y === y) && (square.coordinate.x < bounds.rB[1] && square.coordinate.x > bounds.lB[1])){\n            square.playable=true\n        } else {\n            square.playable=false\n        }\n    })  \n}\n\n//basically a hybrid of rooke and bishop moves\nexport const queenMoves = (squares,y,x,yourTeam) => {\n    let lBounds = setLateralBounds(squares,y,x,yourTeam)\n    let dBounds = setDiagonalBounds(squares,y,x,yourTeam)\n    squares.forEach(square => {\n        if (square.piece && square.piece.team === yourTeam) {\n            square.playable=false\n        } else if ((square.coordinate.x === x) && (square.coordinate.y > lBounds.uB[0] && square.coordinate.y < lBounds.dB[0])){\n            square.playable=true\n        } else if ((square.coordinate.y === y) && (square.coordinate.x < lBounds.rB[1] && square.coordinate.x > lBounds.lB[1])){\n            square.playable=true\n        } else if ((square.coordinate.y - y)  === (square.coordinate.x - x) && (square.coordinate.y < dBounds.lRB[0] && square.coordinate.y > dBounds.uLB[0]) && (square.coordinate.x < dBounds.lRB[1] && square.coordinate.x > dBounds.uLB[1])){\n            square.playable=true\n        } else if ((square.coordinate.y - y)  === (x - square.coordinate.x) && (square.coordinate.y < dBounds.lLB[0] && square.coordinate.y > dBounds.uRB[0]) && (square.coordinate.x > dBounds.lLB[1] && square.coordinate.x < dBounds.uRB[1])){\n            square.playable=true\n        } else {\n            square.playable=false\n        }\n    })  \n}\n\n//a king can move one space in any direction so if the a space is within x +- 2 and y +- 2 from the king's position\n//then it's viable\nexport const kingMoves = (squares,y,x,yourTeam) => {\n    squares.forEach(square => {\n        if (square.piece && square.piece.team === yourTeam) {\n            square.playable=false\n        } else if (square.coordinate.y === y + 2  && square.coordinate.x === x ){\n            square.playable=false\n        } else if ((square.coordinate.y < y + 2 && square.coordinate.y >  y - 2) && (square.coordinate.x < x + 2 && square.coordinate.x > x - 2)){\n            square.playable=true\n        }  else {\n            square.playable=false\n        }\n    })\n}\n\n\n\n","export const moveSquares = (squares,y,x,selected) => {\n    const capturedBlackPieces = []\n    const capturedWhitePieces = []\n    let oldY = selected.coordinate.y\n    let oldX = selected.coordinate.x\n    let piece = selected.piece\n    let team = selected.team\n\n    squares.forEach(square => {\n\n         if (square.coordinate.y === y  && square.coordinate.x === x){\n            square.piece && square.piece.team === 'black' && capturedBlackPieces.push(square.piece)\n            square.piece && square.piece.team === 'white' && capturedWhitePieces.push(square.piece)\n            square.piece={team:team,type:piece}\n        } else if (square.coordinate.y === oldY  && square.coordinate.x === oldX){\n            square.piece=null\n        }\n        square.playable=false\n    })\n    return[capturedBlackPieces,capturedWhitePieces]\n}\n\n\nexport const clearBoard = (squares) => {\n    squares.forEach(square => {\n        square.playable=false\n    })  \n}","//here it will evaluate any actions that are commmitted and manipulate the state\n\n//bring in the types from actions/types\nimport { PAWN,KNIGHT,BISHOP,ROOKE,QUEEN,KING,MOVE_PIECE,END_GAME } from '../actions/types'\nimport{ pawnMoves,rookeMoves,knightMoves,bishopMoves,queenMoves,kingMoves } from './helperFunctions/moves'\nimport{ moveSquares,clearBoard } from './helperFunctions/board'\n\n//create initial state\nconst initialState = {\n    squares: [\n        {\n            coordinate:{y:0,x:0},\n            piece:{\n                team:\"white\",\n                type:\"Rooke\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:0,x:1},\n            piece:{\n                team:\"white\",\n                type:\"Knight\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:0,x:2},\n            piece:{\n                team:\"white\",\n                type:\"Bishop\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:0,x:3},\n            piece:{\n                team:\"white\",\n                type:\"King\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:0,x:4},\n            piece:{\n                team:\"white\",\n                type:\"Queen\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:0,x:5},\n            piece:{\n                team:\"white\",\n                type:\"Bishop\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:0,x:6},\n            piece:{\n                team:\"white\",\n                type:\"Knight\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:0,x:7},\n            piece:{\n                team:\"white\",\n                type:\"Rooke\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:0},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:1},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:2},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:3},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:4},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:5},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:6},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:1,x:7},\n            piece:{\n                team:\"white\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:0},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:1},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:2},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:3},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:4},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:5},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:6},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:2,x:7},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:0},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:1},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:2},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:3},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:4},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:5},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:6},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:3,x:7},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:0},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:1},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:2},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:3},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:4},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:5},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:6},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:4,x:7},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:0},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:1},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:2},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:3},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:4},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:5},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:6},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:5,x:7},\n            piece:null,\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:0},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:1},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:2},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:3},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:4},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:5},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:6},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:6,x:7},\n            piece:{\n                team:\"black\",\n                type:\"Pawn\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:0},\n            piece:{\n                team:\"black\",\n                type:\"Rooke\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:1},\n            piece:{\n                team:\"black\",\n                type:\"Knight\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:2},\n            piece:{\n                team:\"black\",\n                type:\"Bishop\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:3},\n            piece:{\n                team:\"black\",\n                type:\"Queen\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:4},\n            piece:{\n                team:\"black\",\n                type:\"King\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:5},\n            piece:{\n                team:\"black\",\n                type:\"Bishop\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:6},\n            piece:{\n                team:\"black\",\n                type:\"Knight\"\n            },\n            playable:false\n        },\n        {\n            coordinate:{y:7,x:7},\n            piece:{\n                team:\"black\",\n                type:\"Rooke\"\n            },\n            playable:false\n        },\n\n\n    ], \n    selectedPiece:{},\n    capturedWhitePieces: [],\n    capturedBlackPieces: []\n}\n\nexport default (state = initialState, action) => {\n    //when you get an action, evaluate which kind of action it is\n    switch(action.type) {\n        //if you get the action type of FETCH_USERS, return the state with the items from there\n        case PAWN:\n            const pawnState = [...state.squares]\n            pawnMoves(pawnState,action.payload.location.y,action.payload.location.x,action.payload.team)\n            //select the square that triggered the action and store the piece that was there\n            const thisPawn = {\n                coordinate:{\n                    y: action.payload.location.y,\n                    x: action.payload.location.x,\n                },\n                team:action.payload.team,\n                piece:'Pawn'   \n            }\n            return{\n                ...state,\n                //set the state filtered by the available moves\n                squares:pawnState,\n                //select the piece so that when player clicks on a square to move to, that piece is moved there\n                selectedPiece:thisPawn\n            }\n        case KNIGHT:\n            const knightState = [...state.squares]\n            knightMoves(knightState,action.payload.location.y,action.payload.location.x,action.payload.team)\n            const thisKnight = {\n                coordinate:{\n                    y: action.payload.location.y,\n                    x: action.payload.location.x,\n                },\n                team:action.payload.team,\n                piece:'Knight'   \n            }\n            return{\n                ...state,\n                squares:knightState,\n                selectedPiece:thisKnight\n            }\n        case BISHOP:\n            const bishopState = [...state.squares]\n            bishopMoves(bishopState,action.payload.location.y,action.payload.location.x,action.payload.team)\n            const thisBishop = {\n                coordinate:{\n                    y: action.payload.location.y,\n                    x: action.payload.location.x,\n                },\n                team:action.payload.team,\n                piece:'Bishop'   \n            }\n            return{\n                ...state,\n                squares:bishopState,\n                selectedPiece:thisBishop\n            }\n        case ROOKE:\n            const rookeState = [...state.squares]\n            rookeMoves(rookeState,action.payload.location.y,action.payload.location.x,action.payload.team)\n            const thisRooke = {\n                coordinate:{\n                    y: action.payload.location.y,\n                    x: action.payload.location.x,\n                },\n                team:action.payload.team,\n                piece:'Rooke'   \n            }\n            return{\n                ...state,\n                squares:rookeState,\n                selectedPiece:thisRooke\n            }\n        case QUEEN:\n            const queenState = [...state.squares]\n            queenMoves(queenState,action.payload.location.y,action.payload.location.x,action.payload.team)\n            const thisQueen = {\n                coordinate:{\n                    y: action.payload.location.y,\n                    x: action.payload.location.x,\n                },\n                team:action.payload.team,\n                piece:'Queen'   \n            }\n            return{\n                ...state,\n                squares:queenState,\n                selectedPiece:thisQueen\n            }\n        case KING:\n            const kingState = [...state.squares]\n            kingMoves(kingState,action.payload.location.y,action.payload.location.x,action.payload.team)\n            const thisKing = {\n                coordinate:{\n                    y: action.payload.location.y,\n                    x: action.payload.location.x,\n                },\n                team:action.payload.team,\n                piece:'King'   \n            }\n            return{\n                ...state,\n                squares:kingState,\n                selectedPiece:thisKing\n            }\n        case MOVE_PIECE:\n            const movedState = [...state.squares]\n            const hostages = moveSquares(movedState,action.payload.y,action.payload.x,state.selectedPiece)\n            var newBlackPiecesCaptured = hostages[0].length > 0 ? [...state.capturedBlackPieces,hostages[0][0]] : [...state.capturedBlackPieces];\n            var newWhitePiecesCaptured = hostages[1].length > 0 ? [...state.capturedWhitePieces,hostages[1][0]] : [...state.capturedWhitePieces]\n            \n            return{\n                ...state,\n                capturedWhitePieces:newWhitePiecesCaptured,\n                capturedBlackPieces:newBlackPiecesCaptured,\n                squares:movedState,\n                selectedPiece:{}\n            }\n\n        case END_GAME:\n            const endState = [...state.squares]\n            clearBoard(endState)\n            \n            return{\n                ...state,\n                \n                squares:endState,\n                selectedPiece:{}\n            }\n        //add the new user to the items state\n        \n        default:\n            return state\n    }\n}\n\n\n\n\n  \n    \n\n","\n//bring in the types from actions/types\nimport { CHANGE_TURNS,END_GAME } from '../actions/types'\n\n//create initial state\nconst initialState = {\n    turn: 'white',\n    winner: 'none'\n}\n\nexport default (state = initialState, action) => {\n    //when you get an action, evaluate which kind of action it is\n    switch(action.type) {\n        //if you get the action type of CHANGE_TURNS, return the state with the items from there\n        case CHANGE_TURNS:\n            const newTurn = action.payload\n            return{\n                ...state,\n                turn:newTurn,\n            }\n        case END_GAME:\n            const winner = action.payload\n            return{\n                ...state,\n                turn:'none',\n                winner:winner\n            }\n        default:\n            return state\n    }\n}\n\n","import { combineReducers } from 'redux'\nimport boardReducer from './boardReducer'\nimport turnReducer from './turnReducer'\n\n\n\n//send all the reducers back to the store\nexport default combineReducers({\n    board: boardReducer,\n    turns:turnReducer\n    \n})","import { createStore, applyMiddleware,compose} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'  //because the file in reducers is called index.js in can be called here as Root Reducer\n\nconst initialState = {};\n\nconst middleware = [thunk]\n//create the store, incorporate the state and the reducers\nconst Store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        ))\n\nexport default Store","import React from 'react';\nimport { Provider } from 'react-redux'\nimport Chessboard from './components/Chessboard'\nimport store from './Store'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <div className=\"App\" style={teal}>\n          <Chessboard />\n        </div>\n    </Provider>\n  );\n}\n\nconst teal = {\n  backgroundColor:'lightgrey',\n  height:'100vh'\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}